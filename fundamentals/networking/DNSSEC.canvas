{
	"nodes":[
		{"id":"2c26ff8ee1fa827b","x":-906,"y":-768,"width":810,"height":1697,"color":"1","type":"file","file":"fundamentals/networking/DNSSEC.md"},
		{"id":"1eb9fea6be680194","x":1577,"y":-373,"width":671,"height":477,"color":"6","type":"text","text":"**the .example.com. server responds with:**\n- RRSet of DNSKey records (exampleDotComPubKSK and exampleDotComPubZSK)\n- RRSig of the above (`encrypt(hash(RRset), exampleDotComPrivKSK)`)\n- RRset of A records for `.example.com.`\n- RRSig of the above (`encrypt(hash(RRSet), exampleDotComPrivZSK)`)\n\n**the resolver:**\n\n1. **verifies the received records**\n\t- `decrypt(RRSigDNSKey, dotComPubKSK) <=> hash(RRSetDNSKey)`\n\t- `decrypt(RRSigDS, dotComPubZSK) <=> hash(RRSetArecord)`\n\t- => R knows that it can trust the received records\n1. **verifies the zone**\n\t\t- R compares the received pubKSK with the value of previously obtained DS record\n\t\t- `hash(exampleDotComPubKSK) <=> DSexampleDotCom`"},
		{"id":"29b56b2a3d71bd38","x":-32,"y":-373,"width":671,"height":477,"color":"4","type":"text","text":"**the root server responds with:**\n- a referral to name servers of the .dom. zone\n- RRSet of DNSKey records (rootPubKSK and rootPubZSK)\n- RRSig of the above (`encrypt(hash(RRset), rootPrivKSK)`)\n- DS record for .dom. zone (`hash(dotComPubKSK)`, for the pubKSK of the .dom zone)\n- RRSig of the above (`encrypt(hash(RRset), rootPrivZSK)`)\n\n**the resolver:**\n\n1. **verifies the received records**\n\t- `decrypt(RRSigDNSKey, rootPubKSK) <=> hash(RRSetDNSKey)`\n\t- `decrypt(RRsigDS, rootPubZSK) <=> hash(RRSetDS)`\n\t- => R knows that it can trust the received records\n1. **verifies the zone**\n\t\t- R compares the root zones pubKSK with a local copy\n\t\t- if they match, it can trust the zone\n\t\t- R got this pubKSK from somewhere else and not using DNS (e.g. pre-installed)"},
		{"id":"03093769b17b0941","x":773,"y":-373,"width":671,"height":477,"color":"5","type":"text","text":"**the .com. server responds with:**\n- a referral to name servers of the .example.dom. zone\n- RRSet of DNSKey records (dotComPubKSK and dotComPubZSK)\n- RRSig of the above (`encrypt(hash(RRset), dotComPrivKSK)`)\n- DS record for example.dom. zone (`hash(exampleDotComPubKSK)`, for the pubKSK of the example.dom zone)\n- RRSig of the above (`encrypt(hash(RRset), dotComPrivZSK)`)\n\n**the resolver:**\n\n1. **verifies the received records**\n\t- `decrypt(RRSigDNSKey, dotComPubKSK) <=> hash(RRSetDNSKey)`\n\t- `decrypt(RRsigDS, dotComPubZSK) <=> hash(RRSetDS)`\n\t- => R knows that it can trust the received records\n1. **verifies the zone**\n\t\t- R compares the received pubKSK with the value of previously obtained DS record\n\t\t- `hash(dotComPubKSK) <=> DSdotCom`"},
		{"id":"b5ad6793c52f0378","x":640,"y":-874,"width":938,"height":346,"type":"text","text":"```mermaid\nflowchart BT\n\nC[Client C] -->|recursive query for www.example.com.| R\n\nR[Recursive Resolver R] --->|iterative query| Root\n\nRoot[autoritative DNS server for .] -..->|1.| R\n\nR --->|iterative query| DotCom\n\nDotCom[autoritative DNS server for .com.] -..->|2.| R\n\nR --->|iterative query| Example\n\nExample[autoritative DNS server for .example.com.] -..->|3.| R\n```"},
		{"id":"7bb4d5a464ea355b","x":886,"y":237,"width":446,"height":1234,"color":"2","type":"text","text":"# Chain of trust\n\n```mermaid\nflowchart \n    subgraph root\n    KSK(((KSK))) -->|secures with RRSig of the RRSet of the DNSKEYs| ZSK\n    ZSK((ZSK)) -->|secures with RRSig of RRSet| DS\n    DS[DS record]\n    end\n\n    DS -->|hash digest of| KSK_D\n\n    subgraph dotCom\n    KSK_D((KSK)) -->|secures with RRSig of the RRSet of the DNSKEYs| ZSK_D\n    ZSK_D((ZSK)) -->|secures with RRSig of RRSet| DS_D\n    DS_D[DS record]\n    end\n\n    DS_D -->|hash digest of| KSK_E\n\n    subgraph exampleDotCom\n    KSK_E((KSK)) -->|see above| ZSK_E\n    ZSK_E((ZSK)) -->|\"signs RRset of A records (RRSig)\"| A\n    A[www.example.com/A]\n    end\n\n\n\n\n\n\n\n\n\n```"}
	],
	"edges":[
		{"id":"5af36c901e1d7cad","fromNode":"b5ad6793c52f0378","fromSide":"left","toNode":"29b56b2a3d71bd38","toSide":"top","label":"1."},
		{"id":"e648ad210d9abf69","fromNode":"b5ad6793c52f0378","fromSide":"bottom","toNode":"03093769b17b0941","toSide":"top","label":"2."},
		{"id":"811a032e3f2741a5","fromNode":"b5ad6793c52f0378","fromSide":"right","toNode":"1eb9fea6be680194","toSide":"top","label":"3."},
		{"id":"342313f3e5df9834","fromNode":"29b56b2a3d71bd38","fromSide":"bottom","toNode":"7bb4d5a464ea355b","toSide":"left"},
		{"id":"61529ba17c894df7","fromNode":"03093769b17b0941","fromSide":"bottom","toNode":"7bb4d5a464ea355b","toSide":"top"},
		{"id":"105be5e7597e7e45","fromNode":"1eb9fea6be680194","fromSide":"bottom","toNode":"7bb4d5a464ea355b","toSide":"right"}
	]
}